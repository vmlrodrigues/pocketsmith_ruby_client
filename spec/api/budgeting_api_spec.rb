=begin
#PocketSmith

#The PocketSmith API

The version of the OpenAPI document: 2.0
Contact: api@pocketsmith.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for PocketsmithRubyClient::BudgetingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BudgetingApi' do
  before do
    # run before each test
    @api_instance = PocketsmithRubyClient::BudgetingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BudgetingApi' do
    it 'should create an instance of BudgetingApi' do
      expect(@api_instance).to be_instance_of(PocketsmithRubyClient::BudgetingApi)
    end
  end

  # unit tests for users_id_budget_get
  # List budget for user
  # Lists the user&#39;s budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.
  # @param id The unique identifier of the account.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :roll_up Whether parent categories should have their children rolled up into them. When used, the children will still appear in the collection on their own, but their actual and forecast figures will be rolled up to the root parent.
  # @return [Array<BudgetAnalysisPackage>]
  describe 'users_id_budget_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for users_id_budget_summary_get
  # Get budget summary for user
  # Get the user&#39;s budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.
  # @param id The unique identifier of the user.
  # @param period The period to analyse in, one of &#x60;weeks&#x60;, &#x60;months&#x60; or &#x60;years&#x60;. Also supported is &#x60;event&#x60;, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it&#39;s highly unlikely that event period analysis will be possible.
  # @param interval The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.
  # @param start_date The date to start analysing the budget from. This will be bumped out to make full periods as necessary.
  # @param end_date The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.
  # @param [Hash] opts the optional parameters
  # @return [Array<BudgetAnalysisPackage>]
  describe 'users_id_budget_summary_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for users_id_forecast_cache_delete
  # Delete forecast cache for user
  # Delete the user&#39;s cached forecast by recalculating the forecast.
  # @param id The unique identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_forecast_cache_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for users_id_trend_analysis_get
  # Get trend analysis for user
  # Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.
  # @param id The unique identifier of the user.
  # @param period The period to analyse in, one of &#x60;weeks&#x60;, &#x60;months&#x60; or &#x60;years&#x60;. Also supported is &#x60;event&#x60;, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it&#39;s highly unlikely that event period analysis will be possible.
  # @param interval The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.
  # @param start_date The date to start analysing the budget from. This will be bumped out to make full periods as necessary.
  # @param end_date The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.
  # @param categories A comma-separated list of category IDs to analyse.
  # @param scenarios A comma-separated list of scenario IDs to analyse. You&#39;re likely going to want to include all a user&#39;s scenarios here, unless you have reason to only analyse for a subset of scenarios. Regardless of what scenarios are analysed, all actuals (transactions) across all accounts will be included.
  # @param [Hash] opts the optional parameters
  # @return [Array<BudgetAnalysisPackage>]
  describe 'users_id_trend_analysis_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
