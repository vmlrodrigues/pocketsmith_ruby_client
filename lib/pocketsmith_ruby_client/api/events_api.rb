=begin
#PocketSmith

#The PocketSmith API

The version of the OpenAPI document: 2.0
Contact: api@pocketsmith.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module PocketsmithClient
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete event
    # Deletes an event by its ID.
    # @param id [String] The unique identifier of the event.
    # @param behaviour [String] Whether the delete applies only to this event, to all events within the series from this event or to all events within the series.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def events_id_delete(id, behaviour, opts = {})
      events_id_delete_with_http_info(id, behaviour, opts)
      nil
    end

    # Delete event
    # Deletes an event by its ID.
    # @param id [String] The unique identifier of the event.
    # @param behaviour [String] Whether the delete applies only to this event, to all events within the series from this event or to all events within the series.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def events_id_delete_with_http_info(id, behaviour, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.events_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.events_id_delete"
      end
      # verify the required parameter 'behaviour' is set
      if @api_client.config.client_side_validation && behaviour.nil?
        fail ArgumentError, "Missing the required parameter 'behaviour' when calling EventsApi.events_id_delete"
      end
      # verify enum value
      allowable_values = ["one", "forward", "all"]
      if @api_client.config.client_side_validation && !allowable_values.include?(behaviour)
        fail ArgumentError, "invalid value for \"behaviour\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/events/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'behaviour'] = behaviour

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['developerKey']

      new_options = opts.merge(
        :operation => :"EventsApi.events_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get event
    # Gets a particular event by its ID.
    # @param id [String] The unique identifier of the event.
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def events_id_get(id, opts = {})
      data, _status_code, _headers = events_id_get_with_http_info(id, opts)
      data
    end

    # Get event
    # Gets a particular event by its ID.
    # @param id [String] The unique identifier of the event.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def events_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.events_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.events_id_get"
      end
      # resource path
      local_var_path = '/events/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['developerKey']

      new_options = opts.merge(
        :operation => :"EventsApi.events_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update event
    # Updates an event by its ID.
    # @param id [String] The unique identifier of the event.
    # @param [Hash] opts the optional parameters
    # @option opts [EventsIdPutRequest] :events_id_put_request 
    # @return [Event]
    def events_id_put(id, opts = {})
      data, _status_code, _headers = events_id_put_with_http_info(id, opts)
      data
    end

    # Update event
    # Updates an event by its ID.
    # @param id [String] The unique identifier of the event.
    # @param [Hash] opts the optional parameters
    # @option opts [EventsIdPutRequest] :events_id_put_request 
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def events_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.events_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.events_id_put"
      end
      # resource path
      local_var_path = '/events/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'events_id_put_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['developerKey']

      new_options = opts.merge(
        :operation => :"EventsApi.events_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events in scenario.
    # Lists events belonging to a scenario by their ID.
    # @param id [Integer] The unique identifier of the scenario.
    # @param start_date [String] Return the events from and including this date.
    # @param end_date [String] Return the events until and including this date.
    # @param [Hash] opts the optional parameters
    # @return [Array<Event>]
    def scenarios_id_events_get(id, start_date, end_date, opts = {})
      data, _status_code, _headers = scenarios_id_events_get_with_http_info(id, start_date, end_date, opts)
      data
    end

    # List events in scenario.
    # Lists events belonging to a scenario by their ID.
    # @param id [Integer] The unique identifier of the scenario.
    # @param start_date [String] Return the events from and including this date.
    # @param end_date [String] Return the events until and including this date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Event>, Integer, Hash)>] Array<Event> data, response status code and response headers
    def scenarios_id_events_get_with_http_info(id, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.scenarios_id_events_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.scenarios_id_events_get"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling EventsApi.scenarios_id_events_get"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling EventsApi.scenarios_id_events_get"
      end
      # resource path
      local_var_path = '/scenarios/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Event>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['developerKey']

      new_options = opts.merge(
        :operation => :"EventsApi.scenarios_id_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#scenarios_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create event in scenario
    # Creates an event in a scenario by its ID.
    # @param id [Integer] The unique identifier of the scenario.
    # @param [Hash] opts the optional parameters
    # @option opts [ScenariosIdEventsPostRequest] :scenarios_id_events_post_request 
    # @return [Event]
    def scenarios_id_events_post(id, opts = {})
      data, _status_code, _headers = scenarios_id_events_post_with_http_info(id, opts)
      data
    end

    # Create event in scenario
    # Creates an event in a scenario by its ID.
    # @param id [Integer] The unique identifier of the scenario.
    # @param [Hash] opts the optional parameters
    # @option opts [ScenariosIdEventsPostRequest] :scenarios_id_events_post_request 
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def scenarios_id_events_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.scenarios_id_events_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.scenarios_id_events_post"
      end
      # resource path
      local_var_path = '/scenarios/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'scenarios_id_events_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['developerKey']

      new_options = opts.merge(
        :operation => :"EventsApi.scenarios_id_events_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#scenarios_id_events_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events in user.
    # Lists events belonging to a user by their ID.
    # @param id [Integer] The unique identifier of the user.
    # @param start_date [String] Return the events from and including this date.
    # @param end_date [String] Return the events until and including this date.
    # @param [Hash] opts the optional parameters
    # @return [Array<Event>]
    def users_id_events_get(id, start_date, end_date, opts = {})
      data, _status_code, _headers = users_id_events_get_with_http_info(id, start_date, end_date, opts)
      data
    end

    # List events in user.
    # Lists events belonging to a user by their ID.
    # @param id [Integer] The unique identifier of the user.
    # @param start_date [String] Return the events from and including this date.
    # @param end_date [String] Return the events until and including this date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Event>, Integer, Hash)>] Array<Event> data, response status code and response headers
    def users_id_events_get_with_http_info(id, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.users_id_events_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.users_id_events_get"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling EventsApi.users_id_events_get"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling EventsApi.users_id_events_get"
      end
      # resource path
      local_var_path = '/users/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Event>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['developerKey']

      new_options = opts.merge(
        :operation => :"EventsApi.users_id_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#users_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
